开发工具介绍
    开发工具介绍
    1.1 操作系统选用
        本应用开发选择使用的操作系统为Linux，具体发行版为Ubuntu 16.04 xenial。
        选择Linux操作系统的作为开发平台，主要有以下几个因素，完全开源且免费、稳定而安全、资源消耗低、可订制性高。
        Linux是完全开源的操作系统内核(Kernel)，它是一众计算机爱好者以及计算机极客(geek)通力协助完成的智力成果。一般而言，对于优秀操作系统内核的开发需要一支数十人上百人不等的团队，和数以百万甚至上千万的资金投入加持下，才有机会出成果，因此内核是一家操作系统公司关键的命脉。因此如IBM公司AIX操作系统的Monolithic内核，Apple公司macOS操作系统的Darwin内核以及Miscrosoft公司Windows操作系统的NT内核，均是这些公司的核心资料。既然是花了重金开发出来的成品，消费者要想使用它们，就必须给予这些公司相应的费用，否则将是侵权行为，情节严重的将会收到起诉律师函。因此拥有大量计算机设备的信息中心，由于授权费用高昂以及侵权可能带来的严重问题，Linux成为了服务器行业的首选，成为了网络从业人员使用频率最高的系统。
        Linux虽然是一个免费的操作系统，但其稳定性和安全性却是业内有着良好的口碑。据一份windows和linux安全系统分析指出[^1]，由于开源代码由世界各地的计算机爱好者维护，Linux的漏洞与设计失误较少；对于木马而言，linux依然会被木马攻击，但由于linux强大的文件系统，使得没有授权的用户组和用户文件在运行时受到了极大的阻碍，保护了系统安全；对于病毒而言，linux系统中的病毒并没有windows那么繁多。综合得出的结论是，linux对比其他的操作系统有着强而有里的安全护盾。
        系统的资源分配，是操作系统需要解决的头等大事。操作系统主要工作是负责资源的分配，但同时由于操作系统也是一个软件，它也必须常驻操作系统，因此分配资源之前，操作系统就必定会先消耗掉一部分的资源。同样与Windows作为比较，Windows的启动必须要带动图形界面的启动，然而对于操作系统而言，图形界面与内核的工作本里就是互不干涉的。内核的运行可以无视图形界面，只需要简单的命令行界面作为控制即可。windows却是无法实现这种图形界面与内核启动分离的，而linux完全没问题。可见在资源占用上linux十分的优秀。
        可定制行对于一位开发人员十分重要。一个系统的可定制行高，可以体现在对于开发工具安装卸载的简易性，体现在系统代码是否可修改这些方面。而这在linux系统上都有着出色的体现，linux对于安装与卸载软件都是通过库(repository)来统一处理的，用户只需要使用对应库的管理工具，一条指令下去，便可准确实现相关软件的查询，下载与安装。由于没有任何的霸王条款，linux的内核可以所以改动，重新打包发布，使得linux社区linux系统的发行版(distribution)在顶峰时期高达323个，如今维护的依然有285个。
    1.2 开发语言选用
        本应用使用的开发语言为Python3，具体版本为3.5.2。
        选择python3作为开发语言有以下几个原因，语法简单上手迅速，可读性强，运维人员常用技能。
        python做为一门高级语言，它是一款语法十分简单的语言。即使对于计算机基础并不扎实的人员，python上手的难度也不会太难。同时python作为一款解释性(interpreter)语言，只需要一个解释器便可以进行代码的书写十分方便，在解释器的交互界面上编写的代码只需要一个回车键就能得到立即的反馈，这十分符合学习的逻辑。对于符合自己测试目的的代码，程序员能够立即将代码进行转移，这是正反馈，得到错误提示或者不符合测试目的的代码，程序员能够立即进行调试，极大减轻了开发者的负担，平缓了学习曲线。
        作为高级语言，与底层语言最大的不同点，或者说对于人和机器识别起来最大的区别就是可读性。人类可以十分容易地通过对自己已知事物去类比未知的事物。python语言在设计上面，努力贴近英语，务求在变成过程，就如同用英语和计算机交流一样轻松。这对于从小学习外语的中国人来说无疑是一件好事。对于开发人员而言，代码能够运行是较低的层次，代码可以阅读才有提升的可能性。许多代码编写出来不仅是给计算机去阅读去执行的，对大部分编程者而言大多数时候都需要阅读代码，设置是别人的代码，如果这些代码的逻辑不是足够的清晰易懂，对于这个应用而言，即使设计得如何巧妙绝伦，对于这个应用的维护行和扩展性已经传播都是没有任何好处的。
        python的学习的火热，也使得python成为了仅次于shell的运维基本工具。对于嗅探器的使用者而言，他一般会是一名网络工程师，其次他最有可能是一名运维工程师。运维工程师管理的内容触及硬件资源，软件资源，网络资源，监控等多个模块。python对于运维人员是友好的，因此python成为了运维的基本入职技能，这和我们软件设计的面向群体不谋而合。
    1.3 图像用户接口（GUI）
        本应用选择的图形接口(Graphical User Interface)是python的PyQt5库，具体版本是5.12.1。
        GUI的选择是多种多样的，选择PyQt5有以下几个原因，跨平台，快速开发模式，良好到信号处理机制。
        GUI界面遇到的一大问题就是平台的问题，由于不同的操作系统GUI是不同到，不少应用软件既希望在A平台开发又希望在B平台运行，这就需要GUI图形库帮他们处理好这个问题，否这图形的移植将会成为一个不小的阻碍。PyQt在这方面十分的出色，对于不同平台下的GUI，它都能出色的处理。这给有志于对软件进行移植的开发者们，给与了足够的弹性。
        对于大多数开发者而言，图形界面的设计是他们最头痛的问题，这个图形开发需要遵循得规则，模块的排版问题，人体工程学等诸多的要求都是非美术专业同学的痛点。对于这些内容，pyqt给出的解决方式是，提供了一个可视化的软件布局接口(Qt Designer)。通过这款软件，开发人员可以通过对所需控件进行拖拉等操作得到自己想要的图形界面，而对于图形界面微小调整精细打磨的事情则交给后续代码去处理。这种分离式的操作，使得开发人员能够有效的把注意了放在软件的数据上面，从而提高开发的效率。
        图形软件，一个无法回避的问题就是控件之间的通信。这就好象人需要通信一样，控件之间也需要通信来进行协作。对于一些操作触发后，我们会希望这个控件应该做什么，那个控件应该干什么。彼此之间有沟通，才能干打事情。在pyqt上，沟通的实现使用了signal/slot的机制，控件触发某个动作后，反馈一个single出来，需要对这个signal进行处理得函数被称为slot，slot和single没有必然的联系，slot就如同普通的函数一样，没有不同的标识代码，唯独是你可以在single发送后需要指定slot去处理，来表明single和slot至今的关系。这种分离式的思想，给开发带来了轻松和便捷是其他GUI库很难媲美的。


软件功能流程图
[^fig1]
    上图为软件的功能流程图，设计的目的是规划与展示软件的功能。以下将对该流程图进行详细的解说，以此梳理清楚软件的功能情况。软件在启动后有三个可以选择的功能，第一个是文件读取功能，该功能使用的前提是你在本地上已经存放了一份*.pcap格式的文件，第二个功能是辅助工具功能，这个功能集成了软件的非核心功能，这些功能与软件主业务无关，但确是网络人员在数据包分析后经常会调用到的功能，一个是IP地址归属地以及相关信息的查询功能，另外一个是网络专业名词的查询，通过专业名词的查询，我们可以很容易地对一些不太清楚的网络协议进行便捷的查询功能。
    第三个功能个人网络信息的获取，这是本应用的核心功能流程。通过对个人网络信息的获取后，便可以产生相应的网络信息文档。接着是对局域网信息的扫描，扫描完成后，可以对局域网进行网络信息文档的导出。接着允许用户设置过滤器，过滤器的设置是一个可选的功能，默认为不使用过滤器。然后选择相应需要抓包的节点进行分析，抓包分析会反馈简明的数据包信息，需要指出的是，在这个过程中，你依然可以选择使用辅助工具。当我们得到足够的数据包后，我们可以选择停止数据包的捕捉，停止捕捉后，简明网路数据包信息将可以被导出，网络流量的数据图也将可以被使用，在该过程中我们能够重新多次抓包。
    接着我们再次进入选择环节，这里可以选择的功能是数据包分析，通过数据包的分析可以得到详细的解包信息，我们可以通过查询功能对数据包进行筛选，我们还能通过数据包的有关信息进行绘图如数据包协议的绘图，以及数据包长度统计数据的绘图。最后我们可以选择是否保持数据包，保存的文件格式为pcap格式。至此应用的功能流程结束。
    
小结
    本章详细阐述了开发选用的工具，以及选择这些工具的具体原因。接着给出了软件的流程图，对软件运行的功能流程给出了相对具体的描述。本节的目的是通过对开发工具的选用与流程图的制定，对如何开发作出了简单的回答，对后续设计起引导作用。

[1]梁世一.基于windows和linux操作系统安全漏洞分析[J].中国新通信,2018,20(23):145-147.
